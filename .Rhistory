if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# 5.1 Sauvegarde de la table de données principale
saveRDS(master_df_historique, file.path(output_dir, "master_df_historique.RDS"))
# 5.2 Sauvegarde des fonds de carte
saveRDS(map_com_prepared, file.path(output_dir, "map_com.RDS"))
# On crée et sauvegarde les fonds de carte agrégés
map_ept_prepared <- aggregate_map(map_com_prepared, level = "ept")
saveRDS(map_ept_prepared, file.path(output_dir, "map_ept.RDS"))
map_dep_prepared <- aggregate_map(map_com_prepared, level = "dep")
saveRDS(map_dep_prepared, file.path(output_dir, "map_dep.RDS"))
message(
"✅ Tous les fichiers ont été sauvegardés dans le dossier '",
output_dir,
"'. Le projet est prêt pour l'application Shiny."
)
runApp()
runApp()
View(master_df_historique)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
names(master_df_historique)
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
# Librairies pour les manipulations et la gestion des données
library(dplyr)
library(sf)
library(stringr)
library(readxl)
# Chargement des fonctions
source("utils.R")
# 1.1 Égapro (API data.gouv.fr) ------------------------
raw_egapro <- import_latest_egapro()
# 1.2 SIRENE (API Opendatasoft) ------------------------
raw_sirene <- import_sirene_idf()
# 1.3 Recensement : bases standard "IC" ----------------
message("--- Importation Recensement (IC & structure population) ---")
zip_path_pop_structure   <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021_xlsx (1).zip"
raw_pop_structure   <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite     <- import_xlsx_from_zip(zip_path_activite_reside)
raw_pop_structure   <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite     <- import_xlsx_from_zip(zip_path_activite_reside)
# 1.4 Recensement : tableau détaillé ACT5 (CSP × sexe) --
# 1.4 Recensement : tableau détaillé ACT5 (CSP × sexe) -----------------
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_act5 <- import_xlsx_from_zip(zip_path_act5, skip = 9) |>   # 34 923 × 134
rename_to_com()                                    # clé = com
# 2.1 Égapro -------------------------------------------
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 SIRENE -------------------------------------------
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Indicateurs socio‑démographiques -----------------
#    —> nouvelle signature avec df_ic et df_act5
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic            = raw_ic_activite,
df_act5          = raw_act5
)
# communes_features : une ligne par code_commune (75056 inclus)
paris_row <- communes_features %>% filter(code_commune == "75056")
# Crée un vecteur des 20 codes arrondissements
codes_arr <- sprintf("751%02d", 1:20)
# Duplique la ligne 75056 et remplace code_commune
paris_arr <- paris_row[rep(1, 20), ] %>%
mutate(code_commune = codes_arr)
# Ajoute à la table
communes_features <- bind_rows(communes_features, paris_arr)
# 3.1 Chargement du fond de carte des communes
map_com_prepared <- load_and_prepare_map()
master_df_historique <- egapro_prepared %>%
# Jointure avec SIRENE pour la localisation. On ne garde que les entreprises
# dont le siège social a pu être géolocalisé.
inner_join(sirene_clean, by = "siren") %>%
# Jointure avec le fond de carte pour filtrer sur le périmètre géographique
# et récupérer les informations EPT/DEP propres. On utilise st_drop_geometry
# pour ne joindre que les attributs, pas les géométries.
inner_join(
st_drop_geometry(map_com_prepared),
by = c("code_commune" = "com_code")
) %>%
# Jointure avec les indicateurs socio-démographiques de la commune.
# On utilise une jointure à gauche au cas où certaines communes manqueraient.
left_join(communes_features, by = "code_commune")
message(
"✅ Table 'master_df_historique' finale créée avec ",
scales::comma(nrow(master_df_historique)),
" observations (entreprise-année)."
)
# Créer le dossier de destination s'il n'existe pas
output_dir <- "data_shiny"
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# 5.1 Sauvegarde de la table de données principale
saveRDS(master_df_historique, file.path(output_dir, "master_df_historique.RDS"))
# 5.2 Sauvegarde des fonds de carte
saveRDS(map_com_prepared, file.path(output_dir, "map_com.RDS"))
# On crée et sauvegarde les fonds de carte agrégés
map_ept_prepared <- aggregate_map(map_com_prepared, level = "ept")
saveRDS(map_ept_prepared, file.path(output_dir, "map_ept.RDS"))
map_dep_prepared <- aggregate_map(map_com_prepared, level = "dep")
saveRDS(map_dep_prepared, file.path(output_dir, "map_dep.RDS"))
message(
"✅ Tous les fichiers ont été sauvegardés dans le dossier '",
output_dir,
"'. Le projet est prêt pour l'application Shiny."
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
# Librairies nécessaires pour ce script
library(dplyr)
library(sf)
library(stringr)
library(readxl)
# Fonctions de préparation personnalisées
source("utils.R")
# 1.1 Égapro (via API data.gouv.fr)
raw_egapro <- import_latest_egapro()
# 1.2 SIRENE (via API Opendatasoft pour l'IDF)
raw_sirene <- import_sirene_idf()
# 1.3 Données du Recensement de la Population 2021 (INSEE)
message("--- Importation des données du Recensement (fichiers locaux) ---")
zip_path_pop_structure <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021.zip"
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_pop_structure <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite <- import_xlsx_from_zip(zip_path_activite_reside)
# 1.3 Données du Recensement de la Population 2021 (INSEE)
message("--- Importation des données du Recensement (fichiers locaux) ---")
zip_path_pop_structure <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021_xlsx (1).zip"
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_pop_structure <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite <- import_xlsx_from_zip(zip_path_activite_reside)
raw_act5 <- import_xlsx_from_zip(zip_path_act5, skip = 9) %>% rename_to_com()
# 2.1 Préparation des données Égapro
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 Nettoyage des données SIRENE (conservation des sièges sociaux)
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
# Chargement du fond de carte des communes depuis une source ouverte
map_com_prepared <- load_and_prepare_map()
master_df_historique <- egapro_prepared %>%
# Jointure avec SIRENE pour la localisation (on ne garde que les entreprises géolocalisées)
inner_join(sirene_clean, by = "siren") %>%
# Jointure avec les attributs du fond de carte pour récupérer les infos EPT/DEP
inner_join(st_drop_geometry(map_com_prepared), by = c("code_commune" = "com_code")) %>%
# Jointure avec les indicateurs socio-démographiques
left_join(communes_features, by = "code_commune")
message(
"✅ Table 'master_df_historique' finale créée avec ",
scales::comma(nrow(master_df_historique)), " observations."
)
output_dir <- "data_shiny"
if (!dir.exists(output_dir)) dir.create(output_dir)
# 5.1 Sauvegarde de la table de données principale
saveRDS(master_df_historique, file.path(output_dir, "master_df_historique.RDS"))
# 5.2 Sauvegarde des fonds de carte (communes et agrégés)
saveRDS(map_com_prepared, file.path(output_dir, "map_com.RDS"))
map_ept_prepared <- aggregate_map(map_com_prepared, level = "ept")
saveRDS(map_ept_prepared, file.path(output_dir, "map_ept.RDS"))
map_dep_prepared <- aggregate_map(map_com_prepared, level = "dep")
saveRDS(map_dep_prepared, file.path(output_dir, "map_dep.RDS"))
message("✅ Tous les fichiers ont été sauvegardés dans le dossier '", output_dir, "'.")
runApp()
runApp()
runApp()
runApp()
runApp()
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
paris_commune_data <- communes_features %>% filter(code_commune == "75056")
if(nrow(paris_commune_data) > 0) {
codes_arrondissements <- sprintf("751%02d", 1:20)
paris_arrondissements_data <- paris_commune_data[rep(1, 20), ] %>%
mutate(code_commune = codes_arrondissements)
communes_features <- bind_rows(communes_features, paris_arrondissements_data)
message("✅ Données socio-démographiques de Paris dupliquées pour les 20 arrondissements.")
}
# Chargement du fond de carte des communes depuis une source ouverte
map_com_prepared <- load_and_prepare_map()
master_df_historique <- egapro_prepared %>%
# Jointure avec SIRENE pour la localisation
inner_join(sirene_clean, by = "siren") %>%
# Jointure avec les attributs du fond de carte pour récupérer les infos EPT/DEP
inner_join(st_drop_geometry(map_com_prepared), by = c("code_commune" = "com_code")) %>%
# Jointure avec les indicateurs socio-démographiques
left_join(communes_features, by = "code_commune")
message(
"✅ Table 'master_df_historique' finale créée avec ",
scales::comma(nrow(master_df_historique)), " observations."
)
output_dir <- "data_shiny"
if (!dir.exists(output_dir)) dir.create(output_dir)
# 5.1 Sauvegarde de la table de données principale
saveRDS(master_df_historique, file.path(output_dir, "master_df_historique.RDS"))
# 5.2 Sauvegarde des fonds de carte (communes et agrégés)
saveRDS(map_com_prepared, file.path(output_dir, "map_com.RDS"))
map_ept_prepared <- aggregate_map(map_com_prepared, level = "ept")
saveRDS(map_ept_prepared, file.path(output_dir, "map_ept.RDS"))
map_dep_prepared <- aggregate_map(map_com_prepared, level = "dep")
saveRDS(map_dep_prepared, file.path(output_dir, "map_dep.RDS"))
message("✅ Tous les fichiers ont été sauvegardés dans le dossier '", output_dir, "'.")
runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='alespfer', token='1986C654FD8B9D5FEC246D8882E33054', secret='emXOyPvNvHgwZNfrrG8tKGiyIse4j32zidUXDIxh')
setwd("~/Desktop/PROJET_SHINY_RENDU")
rsconnect::deployApp(appName = "barometre-egapro")
runApp('~/egapro')
rsconnect::deployApp(appName = "barometre-egapro")
setwd("~/egapro")
setwd("~/Desktop/PROJET_SHINY_RENDU")
rsconnect::deployApp(appName="barometre-egapro")
runApp('~/egapro')
runApp('~/egapro')
runApp('~/egapro')
runApp('~/egapro')
runApp('~/egapro')
runApp('~/egapro')
runApp('~/egapro')
runApp('~/egapro')
setwd("~/Desktop/PROJET_EGAPRO")
rsconnect::deployApp(appName = "barometre-parite-paris")
runApp('~/egapro')
runApp('~/egapro')
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
# Librairies nécessaires pour ce script
library(dplyr)
library(sf)
library(stringr)
library(readxl)
# Fonctions de préparation personnalisées
source("utils.R")
# 1.1 Egapro (via API data.gouv.fr)
raw_egapro <- import_latest_egapro()
# 1.2 SIRENE (via API Opendatasoft pour l'IDF)
raw_sirene <- import_sirene_idf()
# 1.3 Données du Recensement de la Population 2021 (INSEE)
message("--- Importation des données du Recensement (fichiers locaux) ---")
zip_path_pop_structure <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021_xlsx (1).zip"
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_pop_structure <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite <- import_xlsx_from_zip(zip_path_activite_reside)
raw_act5 <- import_xlsx_from_zip(zip_path_act5, skip = 9) %>% rename_to_com()
# 2.1 Préparation des données Egapro
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 Nettoyage des données SIRENE (conservation des sièges sociaux)
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
# Chargement du fond de carte des communes depuis une source ouverte
map_com_prepared <- load_and_prepare_map()
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
# Librairies nécessaires pour ce script
library(dplyr)
library(sf)
library(stringr)
library(readxl)
# Fonctions de préparation personnalisées
source("utils.R")
# 1.1 Egapro (via API data.gouv.fr)
raw_egapro <- import_latest_egapro()
# 1.2 SIRENE (via API Opendatasoft pour l'IDF)
raw_sirene <- import_sirene_idf()
# 1.3 Données du Recensement de la Population 2021 (INSEE)
message("--- Importation des données du Recensement (fichiers locaux) ---")
zip_path_pop_structure <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021_xlsx (1).zip"
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_pop_structure <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite <- import_xlsx_from_zip(zip_path_activite_reside)
raw_act5 <- import_xlsx_from_zip(zip_path_act5, skip = 9) %>% rename_to_com()
# 2.1 Préparation des données Egapro
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 Nettoyage des données SIRENE (conservation des sièges sociaux)
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
# Chargement du fond de carte des communes depuis une source ouverte
map_com_prepared <- load_and_prepare_map()
master_df_historique <- egapro_prepared %>%
inner_join(sirene_clean, by = "siren") %>%
mutate(
code_commune = if_else(str_starts(code_commune, "751"), "75056", code_commune)
) %>%
inner_join(st_drop_geometry(map_com_prepared), by = c("code_commune" = "com_code")) %>%
left_join(communes_features, by = "code_commune")
message(
"✅ Table 'master_df_historique' finale créée avec ",
scales::comma(nrow(master_df_historique)), " observations."
)
output_dir <- "data_shiny"
if (!dir.exists(output_dir)) dir.create(output_dir)
# 5.1 Sauvegarde de la table de données principale
saveRDS(master_df_historique, file.path(output_dir, "master_df_historique.RDS"))
# 5.2 Sauvegarde des fonds de carte (communes et agrégés)
saveRDS(map_com_prepared, file.path(output_dir, "map_com.RDS"))
map_ept_prepared <- aggregate_map(map_com_prepared, level = "ept")
saveRDS(map_ept_prepared, file.path(output_dir, "map_ept.RDS"))
map_dep_prepared <- aggregate_map(map_com_prepared, level = "dep")
saveRDS(map_dep_prepared, file.path(output_dir, "map_dep.RDS"))
message("✅ Tous les fichiers ont été sauvegardés dans le dossier '", output_dir, "'.")
View(master_df_historique)
# 2.1 Préparation des données Egapro
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 Nettoyage des données SIRENE (conservation des sièges sociaux)
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
paris_commune_data <- communes_features %>% filter(code_commune == "75056")
if(nrow(paris_commune_data) > 0) {
codes_arrondissements <- sprintf("751%02d", 1:20)
paris_arrondissements_data <- paris_commune_data[rep(1, 20), ] %>%
mutate(code_commune = codes_arrondissements)
communes_features <- bind_rows(communes_features, paris_arrondissements_data)
}
# Chargement du fond de carte des communes depuis une source ouverte
map_com_prepared <- load_and_prepare_map()
master_df_historique <- egapro_prepared %>%
# Jointure avec SIRENE pour la localisation
inner_join(sirene_clean, by = "siren") %>%
# Jointure avec les attributs du fond de carte pour récupérer les infos EPT/DEP
inner_join(st_drop_geometry(map_com_prepared), by = c("code_commune" = "com_code")) %>%
# Jointure avec les indicateurs socio-démographiques
left_join(communes_features, by = "code_commune")
message(
"✅ Table 'master_df_historique' finale créée avec ",
scales::comma(nrow(master_df_historique)), " observations."
)
runApp('~/egapro')
# Librairies nécessaires pour ce script
library(dplyr)
library(sf)
library(stringr)
library(readxl)
# Fonctions de préparation personnalisées
source("utils.R")
# 1.1 Egapro (via API data.gouv.fr)
raw_egapro <- import_latest_egapro()
# 1.2 SIRENE (via API Opendatasoft pour l'IDF)
raw_sirene <- import_sirene_idf()
# 1.3 Données du Recensement de la Population 2021 (INSEE)
message("--- Importation des données du Recensement (fichiers locaux) ---")
zip_path_pop_structure <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021_xlsx (1).zip"
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_pop_structure <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite <- import_xlsx_from_zip(zip_path_activite_reside)
raw_act5 <- import_xlsx_from_zip(zip_path_act5, skip = 9) %>% rename_to_com()
# 2.1 Préparation des données Egapro
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 Nettoyage des données SIRENE (conservation des sièges sociaux)
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
paris_commune_data <- communes_features %>% filter(code_commune == "75056")
if(nrow(paris_commune_data) > 0) {
codes_arrondissements <- sprintf("751%02d", 1:20)
paris_arrondissements_data <- paris_commune_data[rep(1, 20), ] %>%
mutate(code_commune = codes_arrondissements)
communes_features <- bind_rows(communes_features, paris_arrondissements_data)
}
# Chargement du fond de carte des communes depuis une source ouverte
map_com_prepared <- load_and_prepare_map()
master_df_historique <- egapro_prepared %>%
# Jointure avec SIRENE pour la localisation
inner_join(sirene_clean, by = "siren") %>%
# Jointure avec les attributs du fond de carte pour récupérer les infos EPT/DEP
inner_join(st_drop_geometry(map_com_prepared), by = c("code_commune" = "com_code")) %>%
# Jointure avec les indicateurs socio-démographiques
left_join(communes_features, by = "code_commune")
message(
"✅ Table 'master_df_historique' finale créée avec ",
scales::comma(nrow(master_df_historique)), " observations."
)
output_dir <- "data_shiny"
if (!dir.exists(output_dir)) dir.create(output_dir)
# 5.1 Sauvegarde de la table de données principale
saveRDS(master_df_historique, file.path(output_dir, "master_df_historique.RDS"))
# 5.2 Sauvegarde des fonds de carte (communes et agrégés)
saveRDS(map_com_prepared, file.path(output_dir, "map_com.RDS"))
map_ept_prepared <- aggregate_map(map_com_prepared, level = "ept")
saveRDS(map_ept_prepared, file.path(output_dir, "map_ept.RDS"))
map_dep_prepared <- aggregate_map(map_com_prepared, level = "dep")
saveRDS(map_dep_prepared, file.path(output_dir, "map_dep.RDS"))
message("✅ Tous les fichiers ont été sauvegardés dans le dossier '", output_dir, "'.")
runApp('~/egapro')
runApp('~/egapro')
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
# Librairies nécessaires pour ce script
library(dplyr)
library(sf)
library(stringr)
library(readxl)
library(janitor)
# Fonctions de préparation personnalisées
source("utils.R")
# 1.1 Egapro (via API data.gouv.fr)
raw_egapro <- import_latest_egapro()
# 1.2 SIRENE (via API Opendatasoft pour l'IDF)
raw_sirene <- import_sirene_idf()
# 1.3 Données du Recensement de la Population 2021 (INSEE)
message("--- Importation des données du Recensement (fichiers locaux) ---")
zip_path_pop_structure <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021_xlsx (1).zip"
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_pop_structure <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite <- import_xlsx_from_zip(zip_path_activite_reside)
raw_act5 <- import_xlsx_from_zip(zip_path_act5, skip = 9) %>% rename_to_com()
# 2.1 Préparation des données Egapro
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 Nettoyage des données SIRENE (conservation des sièges sociaux)
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
# Librairies nécessaires pour ce script
library(dplyr)
library(sf)
library(stringr)
library(readxl)
library(janitor)
# Fonctions de préparation personnalisées
source("utils.R")
# 1.1 Egapro (via API data.gouv.fr)
raw_egapro <- import_latest_egapro()
# 1.2 SIRENE (via API Opendatasoft pour l'IDF)
raw_sirene <- import_sirene_idf()
# 1.3 Données du Recensement de la Population 2021 (INSEE)
message("--- Importation des données du Recensement (fichiers locaux) ---")
zip_path_pop_structure <- "data/raw/base-cc-evol-struct-pop-2021_xlsx.zip"
zip_path_activite_reside <- "data/raw/base-ic-activite-residents-2021_xlsx (1).zip"
zip_path_act5 <- "data/raw/TD_ACT5_2021_xlsx.zip"
raw_pop_structure <- import_xlsx_from_zip(zip_path_pop_structure)
raw_ic_activite <- import_xlsx_from_zip(zip_path_activite_reside)
raw_act5 <- import_xlsx_from_zip(zip_path_act5, skip = 9) %>% rename_to_com()
# 2.1 Préparation des données Egapro
egapro_prepared <- prepare_egapro_data(raw_egapro)
# 2.2 Nettoyage des données SIRENE (conservation des sièges sociaux)
sirene_clean <- clean_sirene_data(raw_sirene)
# 2.3 Calcul des indicateurs socio-démographiques au niveau communal
communes_features <- create_socio_features(
df_pop_structure = raw_pop_structure,
df_ic = raw_ic_activite,
df_act5 = raw_act5
)
View(aggregate_map)

"0",""
"0",""
"0","# ÉTAPE 1 : PRÉPARATION DE SIRENE_CLEAN (La version qui fonctionne)"
"0","#-------------------------------------------------------------------"
"0","# On part de ton dataframe `data_complete` brut"
"0",""
"0",""
"0","# --- Début du chunk final (avec filtrage de sécurité) ---"
"0",""
"0","# Charger les librairies 'tidyr' et 'stringr'"
"0","library(tidyr)"
"0","library(stringr)"
"0",""
"0","# ÉTAPE 1 : PRÉPARATION DE SIRENE_CLEAN (avec la méthode unnest())"
"0","#-------------------------------------------------------------------"
"0","sirene_clean <- data_complete %>%"
"0","  # On standardise les noms de colonnes"
"0","  clean_names() %>%"
"0","  "
"0","  # On filtre sur les sièges avec le nom exact de la colonne"
"0","  filter(etablissementsiege == ""oui"") %>%"
"0","  "
"0","  # On sélectionne les colonnes avec les noms exacts"
"0","  select("
"0","    siren,"
"0","    code_commune = codecommuneetablissement,"
"0","    code_departement = codedepartementetablissement,"
"0","    geolocetablissement"
"0","  ) %>%"
"0","  "
"0","  # On s'assure qu'il n'y a qu'une ligne par entreprise"
"0","  distinct(siren, .keep_all = TRUE) %>%"
"0","  "
"0","  # --- LA CORRECTION CLÉ : ON OUVRE LA COLONNE D'ABORD ---"
"0","  # unnest() va transformer la colonne complexe 'geolocetablissement'"
"0","  # en deux colonnes simples 'lon' et 'lat'."
"0","  unnest(geolocetablissement) %>%"
"0","  "
"0","  # --- ENSUITE, ON FILTRE SUR LES COLONNES SIMPLES ---"
"0","  # Maintenant, is.na() fonctionne parfaitement car 'lat' et 'lon' sont des vecteurs simples."
"0","  filter(!is.na(lat) & !is.na(lon)) %>%"
"0","  "
"0","  # On renomme pour la clarté"
"0","  rename("
"0","    latitude = lat,"
"0","    longitude = lon"
"0","  )"
"0",""
"0","cat(""✅ sirene_clean préparé via unnest(). Contient 'latitude' et 'longitude' numériques.\n\n"")"
"1","✅ sirene_clean préparé via unnest(). Contient 'latitude' et 'longitude' numériques.

"
